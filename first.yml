---
- name: AWX Deploy VM OS Host
  hosts: esxgroup
  connection: local
  gather_facts: yes
  tasks:

  - name: Show Host
    debug:
      msg: "{{ vcsazurigo_username }}"
    ignore_errors: true

  - name: Gather cluster info from given datacenter
    vmware_host_facts:
      hostname: "{{ lookup('ansible.builtin.env', 'VMWARE_HOST') }}"
      username: "{{ vcsazurigo_username }}"
      password: "{{ vcsazurigo_password }}"
      esxi_hostname: 192.168.21.200
      validate_certs: False
    delegate_to: localhost
    register: esxis

  - name: Collect info regarding datastore 
    vmware_datastore_info: 
      hostname: "{{ lookup('ansible.builtin.env', 'VMWARE_HOST') }}"
      username: "{{ vcsazurigo_username }}"
      password: "{{ vcsazurigo_password }}"
      datacenter_name: dc1
      validate_certs: false 
    delegate_to: localhost 
    register: info

  - set_fact:
      ds_size_list: []

  - debug: var=info.datastores

  - set_fact: 
      esxifacts: "{{ esxis.ansible_facts }}"

  - set_fact: 
      memoryrequest: "90000000000"

  - name: Storage request GB
    debug:  
      var: "{{ memoryrequest | int / 1000000000 }}"

  - set_fact: 
      datastore: "{{ ds_size_list + [item.freeSpace] }}"
    with_items:
      - "{{ info.datastores }}"
#    failed_when: datastore|int < 536870912000

  - set_fact: 
      datastoregb: "{{ (item | int / 1000000000) }}"
    loop: "{{ datastore }}"

  - name: Storage avaiable on DS GB
    debug:  
      var: "{{ datastoregb }}"
  
  - fail: msg="No free space on DS"
    when: "{{ datastoregb }} < {{ memoryrequest }}"
    #datastore|int < 536870912000
    # "{{ (item / 1000000000)|int }} | int > {{ memoryrequest }}"

  - debug:
      var: datastore

  #- set_fact:
  #    result2: "{{ (total|memoryrequest - item|int ) }}"
  #  loop: "{{ datastore }}"

  #- debug:
  #    var: result2

  - debug:
      var: esxifacts.ansible_datastore
    

  - debug:
      msg: "Free Memory available on {{esxifacts.ansible_hostname }} = {{ (esxifacts.ansible_memfree_mb * 100 / esxifacts.ansible_memtotal_mb)|int }}%"



  - name: Create a VM folder on given datacenter
    community.vmware.vcenter_folder:
      hostname: "{{ lookup('ansible.builtin.env', 'VMWARE_HOST') }}"
      username: "{{ vcsazurigo_username }}"
      password: "{{ vcsazurigo_password }}"
      datacenter_name: dc1
      folder_name:
        loop:
          - "{{ projectname }}"
          - folder2
          - folder3
      folder_type: vm
      state: present
      validate_certs: no
    register: vm_folder_creation_result
    delegate_to: localhost
    ignore_errors: true
    when: "{{ (esxifacts.ansible_memfree_mb * 100 / esxifacts.ansible_memtotal_mb)|int }} | int > 50"

    # ok calcolo
    # when: "{{ (esxifacts.ansible_memfree_mb * 100 / esxifacts.ansible_memtotal_mb)|int }} | int > 50"
    
    #"{{ (esxifacts.ansible_datastore.free - memoryrequest => 50) }}"

#  - name: Create a VM web on given datacenter
#    community.vmware.vcenter_folder:
#      hostname: '{{ vcsa_hostname }}'
#      username: '{{ vcenter_username }}'
#      password: '{{ vcenter_password }}'
#      datacenter_name: dc1
#      folder_name: web
#      folder_type: vm
#      state: present
#      validate_certs: no
#    register: vm_folder_web_creation_result
#    delegate_to: localhost
#    when: category is search("web")
#
#  - name: Create a VM dc on given datacenter
#    community.vmware.vcenter_folder:
#      hostname: '{{ vcsa_hostname }}'
#      username: '{{ vcenter_username }}'
#      password: '{{ vcenter_password }}'
#      datacenter_name: dc1
#      folder_name: dc
#      folder_type: vm
#      state: present
#      validate_certs: no
#    register: vm_folder_web_creation_result
#    delegate_to: localhost
#    when: category is search("dc")
#
#  - name: Create a VM backup on given datacenter
#    community.vmware.vcenter_folder:
#      hostname: '{{ vcsa_hostname }}'
#      username: '{{ vcenter_username }}'
#      password: '{{ vcenter_password }}'
#      datacenter_name: dc1
#      folder_name: backup
#      folder_type: vm
#      state: present
#      validate_certs: no
#    register: vm_folder_web_creation_result
#    delegate_to: localhost
#    when: category is search("backup")
